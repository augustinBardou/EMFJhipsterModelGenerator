<%@ jet package="org.eclipse.emf.jhipster.generator.templates.model" class="JhipsterModels" imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.jhipster.generator.JhipsterGeneratorUtil"%>
<%GenClass genClass = (GenClass)argument;
	GenPackage genPackage = genClass.getGenPackage();
	GenModel genModel = genPackage.getGenModel();%>
<%java.sql.Timestamp timestamp = new java.sql.Timestamp(new java.util.Date().getTime());%>
// Generated by Jhipster EMF Generator plugins
// Author: Stephane Mangin <stephane.mangin@freesbee.fr>
// Github: https://github.com/StephaneMangin/EMFJhipsterModelGenerator.git
// Timestamp: <%=timestamp%>

<%genModel.markImportLocation(stringBuffer);%>

{
<%for (GenClassifier genClassifier : genPackage.getGenClassifiers()) {%>
	<%if (genClassifier instanceof GenClass) {
		java.util.List<GenFeature> relations = new java.util.ArrayList<GenFeature>();
		java.util.List<GenFeature> fields = new java.util.ArrayList<GenFeature>();
		for (GenFeature genFeature : genClass.getGenFeatures()) {
		if (genFeature.isReferenceType()){
			relations.add(genFeature);
		} else if (genFeature.isField()) {
			fields.add(genFeature);
		}
		
		if (!relations.isEmpty()) {%>
		"relationships" : [
		<%
		for (GenFeature relation : relations) {%>
			{
				"relationshipId": <%=relations.indexOf(genFeature)%>,
				"relationshipName": "<%=relation.getName()%>",
				"otherEntityName": "<%=relation.getGenClass().getName().toLowerCase()%>",
				"relationshipType": "<%=JhipsterGeneratorUtil.getTypeExpression(relation)%>",
				"otherEntityField": "name"
			},
		
		<%	}%>
		],
		<%}%>if (!fields.isEmpty()) {%>
		"fields" : [
		<%
		for (GenFeature field : fields) {%>
			{
				"name": "<%=field.getName()%>",
				"type": "<%=JhipsterGeneratorUtil.getCLassifier(field)%>"
				<% if ((fields.size()) - 1 == fields.indexOf(field)) {%>
				}
				<%} else {%>
			},
			<%}%>
		
		<%}%>
		],
		<%}	
	}
}%>
	"changelog": "<%=timestamp%>",
    "dto": "mapstruct",
    "pagination": "infinite-scroll"
}